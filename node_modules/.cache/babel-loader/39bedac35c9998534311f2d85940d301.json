{"ast":null,"code":"var _jsxFileName = \"/Users/larry/REACTMI/teaRoundPicker/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { preStoredNames } from './data';\nimport { Header } from './Header/Header';\nimport { AddNewMembers } from './AddNewMembers';\nimport { MemberList } from './MemberList';\nimport { PickerButton } from './PickerButton';\nimport { Footer } from './Footer/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _JSON$parse;\n\n  const [names, setNames] = useState((_JSON$parse = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))) !== null && _JSON$parse !== void 0 ? _JSON$parse : preStoredNames);\n  const [pickedName, setPickedName] = useState(\"\"); // addMember add name to the list\n\n  function addMember(newMemberName) {\n    if (newMemberName.trim() !== \"\") {\n      setNames([{\n        id: uuidv4(),\n        memberName: newMemberName\n      }, ...names]);\n      setPickedName(\"\");\n    } else {\n      alert(\"Field can not be empty\");\n    }\n  } // deleteName removes name from the list\n\n\n  function deleteName(id) {\n    setNames(names.filter(name => name.id !== id));\n  } // pickName is use to execute the randomizerAI function\n\n\n  function pickName() {\n    function randomizerAI() {\n      if (names.length !== 0) {\n        const randomName = names[Math.floor(Math.random() * names.length)];\n        let filteredNames = names;\n        const exist = randomName.memberName.toUpperCase() === pickedName.toUpperCase();\n\n        if (exist) {\n          filteredNames = names.filter(name => name.memberName !== randomName.memberName);\n          randomizerAI();\n        } else {\n          setPickedName(randomName.memberName);\n        }\n      } else {\n        setPickedName(\"\");\n        alert(\"\\\"The same name should not be picked twice in a row\\\" Invalid State!\");\n      }\n    }\n\n    randomizerAI();\n  }\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(names));\n  }, [names]); // jsx section output to the User Interface (UI)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app mt-5 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"app_list\",\n            children: [/*#__PURE__*/_jsxDEV(AddNewMembers, {\n              addMember: addMember\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MemberList, {\n              names: names,\n              deleteName: deleteName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), names.length !== 0 && /*#__PURE__*/_jsxDEV(PickerButton, {\n            pickName: pickName,\n            pickedName: pickedName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FrFWE9EOq7IkXHt+jBVmuhEsheg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/larry/REACTMI/teaRoundPicker/src/components/App.js"],"names":["React","useState","useEffect","v4","uuidv4","preStoredNames","Header","AddNewMembers","MemberList","PickerButton","Footer","App","names","setNames","JSON","parse","localStorage","getItem","LOCAL_STORAGE_KEY","pickedName","setPickedName","addMember","newMemberName","trim","id","memberName","alert","deleteName","filter","name","pickName","randomizerAI","length","randomName","Math","floor","random","filteredNames","exist","toUpperCase","setItem","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,cAAT,QAA8B,QAA9B;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAEA,SAASC,GAAT,GAAc;AAAA;;AAAA;;AACZ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,gBAAGa,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBC,iBAArB,CAAX,CAAH,qDAA0Db,cAA1D,CAAlC;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,EAAD,CAA5C,CAFY,CAIZ;;AACA,WAASoB,SAAT,CAAmBC,aAAnB,EAAiC;AAC/B,QAAGA,aAAa,CAACC,IAAd,OAA0B,EAA7B,EAAgC;AAC9BV,MAAAA,QAAQ,CAAC,CAAC;AAAEW,QAAAA,EAAE,EAAEpB,MAAM,EAAZ;AAAgBqB,QAAAA,UAAU,EAAEH;AAA5B,OAAD,EAA8C,GAAGV,KAAjD,CAAD,CAAR;AACFQ,MAAAA,aAAa,CAAC,EAAD,CAAb;AACC,KAHD,MAGK;AACHM,MAAAA,KAAK,CAAC,wBAAD,CAAL;AACD;AACF,GAZW,CAad;;;AACE,WAASC,UAAT,CAAoBH,EAApB,EAAwB;AACtBX,IAAAA,QAAQ,CAACD,KAAK,CAACgB,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACD,GAhBW,CAkBZ;;;AACA,WAASM,QAAT,GAAoB;AAClB,aAASC,YAAT,GAAuB;AACnB,UAAInB,KAAK,CAACoB,MAAN,KAAiB,CAArB,EAAwB;AACtB,cAAMC,UAAU,GAAGrB,KAAK,CAACsB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBxB,KAAK,CAACoB,MAAjC,CAAD,CAAxB;AACA,YAAIK,aAAa,GAAGzB,KAApB;AACA,cAAM0B,KAAK,GAAGL,UAAU,CAACR,UAAX,CAAsBc,WAAtB,OAAwCpB,UAAU,CAACoB,WAAX,EAAtD;;AACA,YAAID,KAAJ,EAAW;AACTD,UAAAA,aAAa,GAAGzB,KAAK,CAACgB,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACJ,UAAL,KAAoBQ,UAAU,CAACR,UAApD,CAAhB;AACAM,UAAAA,YAAY;AACb,SAHD,MAGO;AACLX,UAAAA,aAAa,CAACa,UAAU,CAACR,UAAZ,CAAb;AACD;AACF,OAVD,MAUO;AACNL,QAAAA,aAAa,CAAC,EAAD,CAAb;AACAM,QAAAA,KAAK,CAAC,sEAAD,CAAL;AACF;AACF;;AAEDK,IAAAA,YAAY;AAEb;;AAED7B,EAAAA,SAAS,CACP,MAAI;AACDc,IAAAA,YAAY,CAACwB,OAAb,CAAqBtB,iBAArB,EAAwCJ,IAAI,CAAC2B,SAAL,CAAe7B,KAAf,CAAxC;AACF,GAHM,EAGJ,CAACA,KAAD,CAHI,CAAT,CAzCY,CAgDd;;AACE,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACE,QAAC,aAAD;AAAe,cAAA,SAAS,EAAES;AAA1B;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,UAAD;AAAY,cAAA,KAAK,EAAET,KAAnB;AAA0B,cAAA,UAAU,EAAEe;AAAtC;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAKGf,KAAK,CAACoB,MAAN,KAAiB,CAAjB,iBACC,QAAC,YAAD;AAAc,YAAA,QAAQ,EAAEF,QAAxB;AAAkC,YAAA,UAAU,EAAEX;AAA9C;AAAA;AAAA;AAAA;AAAA,kBANJ,eAQE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GArEQR,G;;KAAAA,G;AAsET,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { preStoredNames} from './data';\nimport { Header } from './Header/Header';\nimport { AddNewMembers } from './AddNewMembers';\nimport { MemberList } from './MemberList';\nimport { PickerButton } from './PickerButton';\nimport { Footer } from './Footer/Footer';\n\nfunction App(){\n  const [names, setNames] = useState(  JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) ?? preStoredNames);\n  const [pickedName, setPickedName] = useState(\"\");\n\n  // addMember add name to the list\n  function addMember(newMemberName){\n    if(newMemberName.trim()  !== \"\"){\n      setNames([{ id: uuidv4(), memberName: newMemberName }, ...names]);\n    setPickedName(\"\");\n    }else{\n      alert(\"Field can not be empty\")\n    }\n  }\n// deleteName removes name from the list\n  function deleteName(id) {\n    setNames(names.filter(name => name.id !== id));\n  }\n\n  // pickName is use to execute the randomizerAI function\n  function pickName() {\n    function randomizerAI(){\n        if (names.length !== 0) {\n          const randomName = names[Math.floor(Math.random() * names.length)];\n          let filteredNames = names;\n          const exist = randomName.memberName.toUpperCase() === pickedName.toUpperCase()\n          if (exist) {\n            filteredNames = names.filter(name => name.memberName !== randomName.memberName);\n            randomizerAI();\n          } else {\n            setPickedName(randomName.memberName);\n          }\n        } else {\n         setPickedName(\"\");\n         alert(\"\\\"The same name should not be picked twice in a row\\\" Invalid State!\");\n      }\n    }\n\n    randomizerAI();\n\n  }\n\n  useEffect(\n    ()=>{\n       localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(names)) ;\n    }, [names]);\n  \n  \n\n// jsx section output to the User Interface (UI)\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"app mt-5 mb-4\">\n          <Header />\n          <main>\n            <div className=\"app_list\">\n              <AddNewMembers addMember={addMember} />\n              <MemberList names={names} deleteName={deleteName} />\n            </div>\n            {names.length !== 0 && (\n              <PickerButton pickName={pickName} pickedName={pickedName} />)\n            }\n            <Footer />\n          </main>\n        </div>\n      </div>\n  \n    </div>\n  )\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}