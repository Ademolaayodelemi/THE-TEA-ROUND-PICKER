{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\n// import { initialNames } from '../initialNames';\n// import { GitHubCorner } from './GitHubCorner/GitHubCorner';\n// import { Header } from './Header/Header';\n// import { AddListItem } from './AddListItem';\n// import { List } from './List';\n// import { PickRandomListItem } from './PickRandomListItem';\n// import { Footer } from './Footer/Footer';\n// const App: React.FC = () => {\n//   const [names, setNames] = useState(initialNames);\n//   const [pickedName, setPickedName] = useState(\"\");\n//   const addName: AddName = newName => {\n//     newName.trim() !== \"\" &&\n//       setNames([{ id: uuidv4(), text: newName }, ...names]);\n//     setPickedName(\"\");\n//   }\n//   const removeName: RemoveName = id => {\n//     setNames(names.filter(name => name.id !== id));\n//   }\n//   const pickName: PickName = () => {\n//     let mutatedNames = names;\n//     const recursivePickName = () => {\n//       if (mutatedNames.length !== 0) {\n//         const randomName = mutatedNames[Math.floor(Math.random() * mutatedNames.length)];\n//         if (randomName.text.toUpperCase() === pickedName.toUpperCase()) {\n//           mutatedNames = mutatedNames.filter(name => name.text !== randomName.text);\n//           recursivePickName();\n//         } else {\n//           setPickedName(randomName.text);\n//         }\n//       } else {\n//         setPickedName(\"\");\n//         alert(\"\\\"The same name should not be picked twice in a row\\\" criteria cannot be met.\");\n//       }\n//     }\n//     recursivePickName();\n//   }\n//   useEffect(() => {\n//     console.clear();\n//     console.log('\\nDeveloped by Ali Tursucular\\n\\nLinkedIn: https://www.linkedin.com/in/alitursucular/\\nPersonal Portfolio: https://alitursucular.github.io');\n//   }, [])\n//   return (\n//     <>\n//       <div className=\"container\">\n//         <div className=\"app mt-5 mb-4\">\n//           <Header />\n//           <main>\n//             <div className=\"app_list\">\n//               <AddListItem addName={addName} />\n//               <List names={names} removeName={removeName} />\n//             </div>\n//             {names.length !== 0 && (\n//               <PickRandomListItem pickName={pickName} pickedName={pickedName} />\n//             )}\n//             <Footer />\n//           </main>\n//         </div>\n//       </div>\n//       <GitHubCorner />\n//     </>\n//   )\n// }\n// export default App;","map":{"version":3,"sources":["/Users/larry/REACTMI/random/src/components/App.tsx"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\n\n// import { initialNames } from '../initialNames';\n// import { GitHubCorner } from './GitHubCorner/GitHubCorner';\n// import { Header } from './Header/Header';\n// import { AddListItem } from './AddListItem';\n// import { List } from './List';\n// import { PickRandomListItem } from './PickRandomListItem';\n// import { Footer } from './Footer/Footer';\n\n// const App: React.FC = () => {\n//   const [names, setNames] = useState(initialNames);\n//   const [pickedName, setPickedName] = useState(\"\");\n\n//   const addName: AddName = newName => {\n//     newName.trim() !== \"\" &&\n//       setNames([{ id: uuidv4(), text: newName }, ...names]);\n//     setPickedName(\"\");\n//   }\n\n//   const removeName: RemoveName = id => {\n//     setNames(names.filter(name => name.id !== id));\n//   }\n\n//   const pickName: PickName = () => {\n//     let mutatedNames = names;\n\n//     const recursivePickName = () => {\n//       if (mutatedNames.length !== 0) {\n//         const randomName = mutatedNames[Math.floor(Math.random() * mutatedNames.length)];\n\n//         if (randomName.text.toUpperCase() === pickedName.toUpperCase()) {\n//           mutatedNames = mutatedNames.filter(name => name.text !== randomName.text);\n//           recursivePickName();\n//         } else {\n//           setPickedName(randomName.text);\n//         }\n//       } else {\n//         setPickedName(\"\");\n//         alert(\"\\\"The same name should not be picked twice in a row\\\" criteria cannot be met.\");\n//       }\n//     }\n\n//     recursivePickName();\n//   }\n\n//   useEffect(() => {\n//     console.clear();\n//     console.log('\\nDeveloped by Ali Tursucular\\n\\nLinkedIn: https://www.linkedin.com/in/alitursucular/\\nPersonal Portfolio: https://alitursucular.github.io');\n//   }, [])\n\n//   return (\n//     <>\n//       <div className=\"container\">\n//         <div className=\"app mt-5 mb-4\">\n//           <Header />\n//           <main>\n//             <div className=\"app_list\">\n//               <AddListItem addName={addName} />\n//               <List names={names} removeName={removeName} />\n//             </div>\n//             {names.length !== 0 && (\n//               <PickRandomListItem pickName={pickName} pickedName={pickedName} />\n//             )}\n//             <Footer />\n//           </main>\n//         </div>\n//       </div>\n//       <GitHubCorner />\n//     </>\n//   )\n// }\n\n// export default App;"]},"metadata":{},"sourceType":"module"}